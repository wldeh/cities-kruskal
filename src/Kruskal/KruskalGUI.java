package Kruskal;

import java.awt.Toolkit;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Scanner;
import javax.swing.JOptionPane;

/**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 *<pre>
 * File         KruskalGUI.java
 * Description  A class representing the GUI used in the Kruskal's Minimum
 *              Spanning Tree application. This program reads data from text
 *              files and builds WeightedGraph using vertices as a String
 *              ArrayList and an ArrayList of WeightedEdges. The WeightedGraph's
 *              getShortestPath yields a shortest path tree used todisplay the
 *              shortest paths.
 * Platform     jdk 20.0.2; PC Windows 11
 * History Log
 * @author	    <i>wldeh</i>
 * @version 	  %1% %0%
 * @see     	  javax.swing.JFrame
 * @see         java.awt.Toolkit
 *</pre>
 *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

public class KruskalGUI extends javax.swing.JFrame {

  private String fileName = "src/Data/WeightedEdges1.txt";
  private StringBuffer output = new StringBuffer();
  private List<WeightedEdge> edges;
  private WeightedGraph<Integer> graph;
  private int numberOfVertices = 0;
  private boolean isConnected = false;

  /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   *<pre>
   * Constructor  KruskalGUI()-default constructor
   * Description  Create an instance of the GUI form, set icon image, set
   *              default button, and instantiate edges and graph.
   * Date         11/28/2023
   * History Log
   * @author      <i>wldeh</i>
   *</pre>
   *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  public KruskalGUI() {
    initComponents();
    //set image
    this.setIconImage(
        Toolkit.getDefaultToolkit().getImage("src/Images/Cities_tiny.png")
      );
    //set default button
    setLocationRelativeTo(null);
    this.getRootPane().setDefaultButton(goJButton);
    edges = new ArrayList<>();
    pathJMenuItem.setEnabled(false);
    //graph = new WeightedGraph<Integer>(edges, numberOfVertices);
  }

  /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   *<pre>
   * Method       readFromFile()
   * Description  Read text file and create ArrayList.
   * Date:        11/28/2023
   * @author      <i>wldeh</i>
   * @param       textFile String
   *</pre>
   *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  private void readFromFile(String fileName) {
    try {
      File file = new File(fileName);
      Scanner inFile = new Scanner(file);
      edges = new ArrayList<>();

      // Read the number of vertices--first line in file
      String line = inFile.nextLine();
      numberOfVertices = Integer.parseInt(line);

      while (inFile.hasNext()) {
        line = inFile.nextLine();
        //split line at "|"
        String[] triplets = line.split("\\|");

        for (String triplet : triplets) {
          String[] tokens = triplet.split(",");
          int u = Integer.parseInt(tokens[0].trim());
          int v = Integer.parseInt(tokens[1].trim());
          double w = Double.parseDouble(tokens[2].trim());
          edges.add(new WeightedEdge(u, v, w));
          edges.add(new WeightedEdge(v, u, w));
        }
      }
    } catch (FileNotFoundException fnfexp) {
      JOptionPane.showMessageDialog(
        null,
        "Input error -- File not found.",
        "File Not Found Error!",
        JOptionPane.ERROR_MESSAGE
      );
    }
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {
    titleJLabel = new javax.swing.JLabel();
    fileJLabel = new javax.swing.JLabel();
    filesJComboBox = new javax.swing.JComboBox<>();
    controlJPanel = new javax.swing.JPanel();
    goJButton = new javax.swing.JButton();
    resultsScrollPane = new javax.swing.JScrollPane();
    resultsJTextArea = new javax.swing.JTextArea();
    quitJButton = new javax.swing.JButton();
    personJMenuBar = new javax.swing.JMenuBar();
    fileJMenu = new javax.swing.JMenu();
    showPictureOfGraphsJMenuItem = new javax.swing.JMenuItem();
    fileJSeparator = new javax.swing.JPopupMenu.Separator();
    printMenuItem = new javax.swing.JMenuItem();
    quitJMenuItem = new javax.swing.JMenuItem();
    moreJMenu = new javax.swing.JMenu();
    detailsJMenuItem = new javax.swing.JMenuItem();
    pathJMenuItem = new javax.swing.JMenuItem();
    helpMenu = new javax.swing.JMenu();
    aboutJMenuItem = new javax.swing.JMenuItem();

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
    setTitle("Kruskal's Minimum Spanning Tree");

    titleJLabel.setFont(new java.awt.Font("Tempus Sans ITC", 2, 42)); // NOI18N
    titleJLabel.setForeground(new java.awt.Color(0, 102, 102));
    titleJLabel.setText("Kruskal's Minimum Spanning Tree");

    fileJLabel.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
    fileJLabel.setText("Select File:");

    filesJComboBox.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
    filesJComboBox.setModel(
      new javax.swing.DefaultComboBoxModel<>(
        new String[] { "WeightedEdges0", "WeightedEdges1", "WeightedEdges2" }
      )
    );

    controlJPanel.setLayout(new java.awt.GridLayout(1, 2, 3, 3));

    goJButton.setBackground(new java.awt.Color(255, 255, 204));
    goJButton.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
    goJButton.setMnemonic('g');
    goJButton.setText("Go");
    goJButton.setToolTipText("Show results");
    goJButton.addActionListener(
      new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
          goJButtonActionPerformed(evt);
        }
      }
    );
    controlJPanel.add(goJButton);

    resultsJTextArea.setEditable(false);
    resultsJTextArea.setBackground(new java.awt.Color(240, 240, 240));
    resultsJTextArea.setColumns(20);
    resultsJTextArea.setFont(new java.awt.Font("Verdana", 0, 16)); // NOI18N
    resultsJTextArea.setLineWrap(true);
    resultsJTextArea.setRows(5);
    resultsJTextArea.setWrapStyleWord(true);
    resultsScrollPane.setViewportView(resultsJTextArea);

    quitJButton.setBackground(new java.awt.Color(255, 255, 204));
    quitJButton.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
    quitJButton.setMnemonic('Q');
    quitJButton.setText("Quit");
    quitJButton.setToolTipText("End the Application");
    quitJButton.addActionListener(
      new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
          quitJButtonActionPerformed(evt);
        }
      }
    );

    fileJMenu.setMnemonic('F');
    fileJMenu.setText("File");

    showPictureOfGraphsJMenuItem.setMnemonic('S');
    showPictureOfGraphsJMenuItem.setText("Show Graph");
    showPictureOfGraphsJMenuItem.setToolTipText("Show picture of cities");
    showPictureOfGraphsJMenuItem.addActionListener(
      new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
          showPictureOfGraphsJMenuItemActionPerformed(evt);
        }
      }
    );
    fileJMenu.add(showPictureOfGraphsJMenuItem);
    fileJMenu.add(fileJSeparator);

    printMenuItem.setMnemonic('P');
    printMenuItem.setText("Print Form");
    printMenuItem.setToolTipText("Print Form as GUI");
    printMenuItem.addActionListener(
      new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
          printMenuItemActionPerformed(evt);
        }
      }
    );
    fileJMenu.add(printMenuItem);

    quitJMenuItem.setMnemonic('Q');
    quitJMenuItem.setText("Quit");
    quitJMenuItem.setToolTipText("");
    quitJMenuItem.addActionListener(
      new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
          quitJMenuItemActionPerformed(evt);
        }
      }
    );
    fileJMenu.add(quitJMenuItem);

    personJMenuBar.add(fileJMenu);

    moreJMenu.setMnemonic('M');
    moreJMenu.setText("More");

    detailsJMenuItem.setAccelerator(
      javax.swing.KeyStroke.getKeyStroke(
        java.awt.event.KeyEvent.VK_Y,
        java.awt.event.InputEvent.CTRL_DOWN_MASK
      )
    );
    detailsJMenuItem.setMnemonic('y');
    detailsJMenuItem.setText("City Details");
    detailsJMenuItem.setToolTipText(
      "Display the shortest path between two cities"
    );
    detailsJMenuItem.addActionListener(
      new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
          detailsJMenuItemActionPerformed(evt);
        }
      }
    );
    moreJMenu.add(detailsJMenuItem);

    pathJMenuItem.setAccelerator(
      javax.swing.KeyStroke.getKeyStroke(
        java.awt.event.KeyEvent.VK_Y,
        java.awt.event.InputEvent.CTRL_DOWN_MASK
      )
    );
    pathJMenuItem.setMnemonic('y');
    pathJMenuItem.setText("Shortest Path");
    pathJMenuItem.setToolTipText("Display picture and details of player");
    pathJMenuItem.addActionListener(
      new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
          pathJMenuItemActionPerformed(evt);
        }
      }
    );
    moreJMenu.add(pathJMenuItem);

    personJMenuBar.add(moreJMenu);

    helpMenu.setMnemonic('H');
    helpMenu.setText("Help");

    aboutJMenuItem.setMnemonic('A');
    aboutJMenuItem.setText("About");
    aboutJMenuItem.setToolTipText("Show About form");
    aboutJMenuItem.addActionListener(
      new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
          aboutJMenuItemActionPerformed(evt);
        }
      }
    );
    helpMenu.add(aboutJMenuItem);

    personJMenuBar.add(helpMenu);

    setJMenuBar(personJMenuBar);

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(
      getContentPane()
    );
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout
        .createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(
          layout
            .createSequentialGroup()
            .addGroup(
              layout
                .createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(
                  layout
                    .createSequentialGroup()
                    .addGap(72, 72, 72)
                    .addComponent(fileJLabel)
                    .addPreferredGap(
                      javax.swing.LayoutStyle.ComponentPlacement.UNRELATED
                    )
                    .addComponent(
                      filesJComboBox,
                      javax.swing.GroupLayout.PREFERRED_SIZE,
                      244,
                      javax.swing.GroupLayout.PREFERRED_SIZE
                    )
                    .addGap(42, 42, 42)
                    .addComponent(
                      controlJPanel,
                      javax.swing.GroupLayout.PREFERRED_SIZE,
                      187,
                      javax.swing.GroupLayout.PREFERRED_SIZE
                    )
                    .addPreferredGap(
                      javax.swing.LayoutStyle.ComponentPlacement.RELATED
                    )
                    .addComponent(
                      quitJButton,
                      javax.swing.GroupLayout.PREFERRED_SIZE,
                      174,
                      javax.swing.GroupLayout.PREFERRED_SIZE
                    )
                )
                .addGroup(
                  layout
                    .createSequentialGroup()
                    .addGap(49, 49, 49)
                    .addComponent(
                      resultsScrollPane,
                      javax.swing.GroupLayout.PREFERRED_SIZE,
                      785,
                      javax.swing.GroupLayout.PREFERRED_SIZE
                    )
                )
            )
            .addContainerGap(41, Short.MAX_VALUE)
        )
        .addGroup(
          javax.swing.GroupLayout.Alignment.TRAILING,
          layout
            .createSequentialGroup()
            .addGap(0, 0, Short.MAX_VALUE)
            .addComponent(
              titleJLabel,
              javax.swing.GroupLayout.PREFERRED_SIZE,
              618,
              javax.swing.GroupLayout.PREFERRED_SIZE
            )
            .addGap(109, 109, 109)
        )
    );
    layout.setVerticalGroup(
      layout
        .createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(
          layout
            .createSequentialGroup()
            .addGap(9, 9, 9)
            .addComponent(
              titleJLabel,
              javax.swing.GroupLayout.PREFERRED_SIZE,
              67,
              javax.swing.GroupLayout.PREFERRED_SIZE
            )
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(
              layout
                .createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(
                  layout
                    .createParallelGroup(
                      javax.swing.GroupLayout.Alignment.BASELINE
                    )
                    .addComponent(
                      filesJComboBox,
                      javax.swing.GroupLayout.PREFERRED_SIZE,
                      38,
                      javax.swing.GroupLayout.PREFERRED_SIZE
                    )
                    .addComponent(fileJLabel)
                )
                .addComponent(
                  controlJPanel,
                  javax.swing.GroupLayout.PREFERRED_SIZE,
                  38,
                  javax.swing.GroupLayout.PREFERRED_SIZE
                )
                .addComponent(
                  quitJButton,
                  javax.swing.GroupLayout.PREFERRED_SIZE,
                  38,
                  javax.swing.GroupLayout.PREFERRED_SIZE
                )
            )
            .addPreferredGap(
              javax.swing.LayoutStyle.ComponentPlacement.UNRELATED
            )
            .addComponent(
              resultsScrollPane,
              javax.swing.GroupLayout.PREFERRED_SIZE,
              421,
              javax.swing.GroupLayout.PREFERRED_SIZE
            )
            .addContainerGap(34, Short.MAX_VALUE)
        )
    );

    pack();
  } // </editor-fold>//GEN-END:initComponents

  /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   *<pre>
   * Method       showPictureOfGraphsMenuItemActionPerformed()
   * Description  Display picture of the two files and the graphs used.
   * @author      <i>wldeh</i>
   * Date         11/28/2023
   * History Log
   *</pre>
   *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  private void showPictureOfGraphsJMenuItemActionPerformed(
    java.awt.event.ActionEvent evt
  ) { //GEN-FIRST:event_showPictureOfGraphsJMenuItemActionPerformed
    int index = filesJComboBox.getSelectedIndex();
    new ShowGraph(index).setVisible(true);
  } //GEN-LAST:event_showPictureOfGraphsJMenuItemActionPerformed

  /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   *<pre>
   * Method       printJMenuItemActionPerformed()
   * Description  Event handler to print the for as a GUI. Calls the
   *              PrintUtilities class static printComponent method.
   * @author      <i>wldeh</i>
   * Date         11/28/2023
   * History Log
   *</pre>
   *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  private void printMenuItemActionPerformed(java.awt.event.ActionEvent evt) { //GEN-FIRST:event_printMenuItemActionPerformed
    PrintUtilities.printComponent(this);
  } //GEN-LAST:event_printMenuItemActionPerformed

  /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   *<pre>
   * Method       quitJMenuItemActionPerformed()
   * Description  Event handler to end the application. Calls the quitJButton
   *              doClick event handler,
   * @author      <i>wldeh</i>
   * Date         11/28/2023
   * History Log
   *</pre>
   *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  private void quitJMenuItemActionPerformed(java.awt.event.ActionEvent evt) { //GEN-FIRST:event_quitJMenuItemActionPerformed
    quitJButton.doClick();
  } //GEN-LAST:event_quitJMenuItemActionPerformed

  /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   *<pre>
   * Method       aboutJMenuItemActionPerformed()
   * Description  Create an About form and show it.
   * @param       evt java.awt.event.KeyEvent
   * @author      <i>wldeh</i>
   * Date         11/28/2023
   * History Log
   *</pre>
   *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  private void aboutJMenuItemActionPerformed(java.awt.event.ActionEvent evt) { //GEN-FIRST:event_aboutJMenuItemActionPerformed
    About aboutWindow = new About(this, true);
    aboutWindow.setVisible(true);
  } //GEN-LAST:event_aboutJMenuItemActionPerformed

  /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   *<pre>
   * Method       goJButtonActionPerformed()
   * Description  Event handler to start the application. Calls readFromFile
   *              to read both cities and edges text files and createGraph to
   *              create the weighted graph.
   * @author      <i>wldeh</i>
   * Date         11/28/2023
   * History Log
   *</pre>
   *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  private void goJButtonActionPerformed(java.awt.event.ActionEvent evt) { //GEN-FIRST:event_goJButtonActionPerformed
    try {
      resultsJTextArea.setText("");
      output = new StringBuffer();
      String fileComboBox = filesJComboBox.getSelectedItem().toString();
      fileName = "src/Data/" + fileComboBox + ".txt";
      readFromFile(fileName);
      createGraph(); //create the graph and decide if connected
      pathJMenuItem.setEnabled(true);
    } catch (Exception exp) {
      JOptionPane.showMessageDialog(
        null,
        exp.getMessage(),
        "Cannot create graph",
        JOptionPane.INFORMATION_MESSAGE
      );
    }
  } //GEN-LAST:event_goJButtonActionPerformed

  /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   *<pre>
   * Method       quitJButtonActionPerformed()
   * Description  Event handler to end the application.
   * @author      <i>wldeh</i>
   * Date         11/28/2023
   * History Log
   *</pre>
   *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  private void quitJButtonActionPerformed(java.awt.event.ActionEvent evt) { //GEN-FIRST:event_quitJButtonActionPerformed
    System.exit(0);
  } //GEN-LAST:event_quitJButtonActionPerformed

  /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   * <pre>
   * Method       detailsJMenuItemActionPerformed
   * Description  Handles the action performed event for the details JMenuItem.
   * Date         11/28/2023
   * History Log
   * @param       evt The ActionEvent object representing the event details.
   * </pre>
   *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  private void detailsJMenuItemActionPerformed(java.awt.event.ActionEvent evt) { //GEN-FIRST:event_detailsJMenuItemActionPerformed
    String selectedFile = filesJComboBox.getSelectedItem().toString() + ".txt";
    List<City> cityList = readCityDataToList(
      "src/Data/" + selectedFile.replace("WeightedEdges", "Cities")
    );

    // Convert city list to an array for display
    City[] citiesArray = cityList.toArray(new City[0]);
    City selectedCity = (City) JOptionPane.showInputDialog(
      this,
      "Select a City:",
      "City Selection",
      JOptionPane.QUESTION_MESSAGE,
      null,
      citiesArray,
      citiesArray[0]
    );

    if (selectedCity != null) {
      // Open the city details
      CityDetails cityDetailsDialog = new CityDetails(selectedCity);
      cityDetailsDialog.setVisible(true);
    }
  } //GEN-LAST:event_detailsJMenuItemActionPerformed

  /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   * <pre>
   * Method       pathJMenuItemActionPerformed
   * Description  Responds to the selection of the 'path' JMenuItem.
   * Date         11/28/2023
   * History Log
   * @param       evt The ActionEvent object representing the event details.
   * </pre>
   *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  private void pathJMenuItemActionPerformed(java.awt.event.ActionEvent evt) { //GEN-FIRST:event_pathJMenuItemActionPerformed
    String selectedFile = filesJComboBox.getSelectedItem().toString() + ".txt";
    List<City> cityList = readCityDataToList(
      "src/Data/" + selectedFile.replace("WeightedEdges", "Cities")
    );

    City[] citiesArray = cityList.toArray(new City[0]);

    City startCity = (City) JOptionPane.showInputDialog(
      this,
      "Select the start city:",
      "Start City Selection",
      JOptionPane.QUESTION_MESSAGE,
      null,
      citiesArray,
      citiesArray[0]
    );

    City endCity = (City) JOptionPane.showInputDialog(
      this,
      "Select the end city:",
      "End City Selection",
      JOptionPane.QUESTION_MESSAGE,
      null,
      citiesArray,
      citiesArray[0]
    );

    if (startCity != null && endCity != null) {
      // Get the shortest path
      WeightedGraph.ShortestPathTree spt = graph.getShortestPath(
        startCity.getId()
      );
      List<Integer> path = spt.getPath(endCity.getId());

      // Construct the path string
      StringBuilder pathStr = new StringBuilder();
      for (int cityId : path) {
        pathStr.append(cityList.get(cityId).getName()).append(" -> ");
      }
      pathStr.delete(pathStr.length() - 4, pathStr.length()); // Remove the last arrow

      // Show the result
      JOptionPane.showMessageDialog(
        this,
        "Shortest path from " +
        startCity.getName() +
        " to " +
        endCity.getName() +
        ":\n" +
        pathStr.toString() +
        "\nTotal cost: " +
        spt.getCost(endCity.getId()),
        "Shortest Path",
        JOptionPane.INFORMATION_MESSAGE
      );
    }
  } //GEN-LAST:event_pathJMenuItemActionPerformed

  /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   * <pre>
   * Method       readCityDataToList
   * Description  Reads city data from a file and converts it into a list of City
   *              objects.
   * Date         11/28/2023
   * History Log
   * @param       filePath The path of the file containing city data.
   * @return      List of City objects constructed from the file data.
   * </pre>
   *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  public List<City> readCityDataToList(String filePath) {
    List<City> cityList = new ArrayList<>();
    try {
      BufferedReader reader = new BufferedReader(new FileReader(filePath));
      String line;
      while ((line = reader.readLine()) != null) {
        String[] data = line.split(",");
        int id = Integer.parseInt(data[0].trim());
        String name = data[1].trim();
        String state = data[2].trim();
        double area = Double.parseDouble(data[3].trim());
        int population = Integer.parseInt(data[4].trim());
        cityList.add(new City(id, name, state, area, population));
      }
      reader.close();
    } catch (IOException e) {
      e.printStackTrace();
    }
    return cityList;
  }

  /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   * <pre>
   * Method       readCityData
   * Description  Reads city data from a file and stores it in a map where the key
   *              is the city's ID and the value is the city's name.
   * Date         11/28/2023
   * History Log
   * @param       filePath The path of the file containing city data.
   * @return      Map with city IDs as keys and city names as values.
   * </pre>
   *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  public Map<Integer, String> readCityData(String filePath) {
    Map<Integer, String> cityMap = new HashMap<>();
    try {
      BufferedReader reader = new BufferedReader(new FileReader(filePath));
      String line;
      while ((line = reader.readLine()) != null) {
        String[] data = line.split(",");
        int id = Integer.parseInt(data[0].trim());
        String cityName = data[1].trim();
        cityMap.put(id, cityName);
      }
      reader.close();
    } catch (IOException e) {
      e.printStackTrace();
    }
    return cityMap;
  }

  /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   *<pre>
   * Method       createGraph()
   * Description  Created WeightedGraph and associated tree and decide if
   *              the graph is connected and invoke the getShortestPath
   * @author      <i>wldeh</i>
   * Date         11/28/2023
   * History Log
   *</pre>
   *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  public void createGraph() {
    Map<Integer, String> cityMap = readCityData("src/data/cities0.txt");

    List<WeightedEdge> kruskalMST = new ArrayList<>();
    resultsJTextArea.setText("");
    output = new StringBuffer();

    graph = new WeightedGraph<>(edges, numberOfVertices);
    output.append("The number of vertices is " + numberOfVertices + "\n\n");

    kruskalMST = DisjointSetClass.kruskalAlgorithm(edges, numberOfVertices);

    // Create the MST from the graph
    AbstractGraph<Integer>.Tree tree = graph.dfs(0);
    output.append(graph.displayWeightedEdges() + "\n");

    if (tree.getNumberOfVerticesFound() == numberOfVertices) {
      output.append("\nThe graph is connected");
      isConnected = true;
    } else {
      output.append("\nThe graph is not connected");
      isConnected = false;
    }

    StringBuffer out = displayEdges(kruskalMST, cityMap);

    output.append(
      "\n\nWeighted edges comprising the MST:\n" +
      out.substring(0, out.length() - 2)
    );
    output.append(
      "\n\nTotal weight in MST is " + DisjointSetClass.getTotalWeight()
    );
    resultsJTextArea.setText(output.toString());
  }

  /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   *<pre>
   * Method       displayEdges()
   * Description  Return a String of all weighted edges.
   * @author      <i>wldeh</i>
   * Date         11/28/2023
   * History Log
   *</pre>
   *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  private StringBuffer displayEdges(
    List<WeightedEdge> edges,
    Map<Integer, String> cityMap
  ) {
    StringBuffer sb = new StringBuffer();
    for (WeightedEdge edge : edges) {
      String cityU = cityMap.getOrDefault(edge.u, "Unknown City");
      String cityV = cityMap.getOrDefault(edge.v, "Unknown City");
      sb.append(
        "(" +
        cityU +
        ", " +
        cityV +
        ")" +
        "(" +
        edge.u +
        ", " +
        edge.v +
        ") weight: " +
        edge.weight +
        "\n"
      );
    }
    return sb;
  }

  /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   *<pre>
   * Method       main()
   * Description  Displays splash screen and the main GUI form.
   * @param       args are the command line strings
   * @author      <i>wldeh</i>
   * Date         11/28/2023
   * History Log
   *</pre>
   *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  public static void main(String args[]) {
    // Show splash screen
    Splash mySplash = new Splash(4000); // duration = 4 seconds
    mySplash.showSplash(); // show splash screen
    /* Set the Nimbus look and feel */
    //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
    /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
     * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
     */
    try {
      for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
        if ("Nimbus".equals(info.getName())) {
          javax.swing.UIManager.setLookAndFeel(info.getClassName());
          break;
        }
      }
    } catch (ClassNotFoundException ex) {
      java.util.logging.Logger
        .getLogger(KruskalGUI.class.getName())
        .log(java.util.logging.Level.SEVERE, null, ex);
    } catch (InstantiationException ex) {
      java.util.logging.Logger
        .getLogger(KruskalGUI.class.getName())
        .log(java.util.logging.Level.SEVERE, null, ex);
    } catch (IllegalAccessException ex) {
      java.util.logging.Logger
        .getLogger(KruskalGUI.class.getName())
        .log(java.util.logging.Level.SEVERE, null, ex);
    } catch (javax.swing.UnsupportedLookAndFeelException ex) {
      java.util.logging.Logger
        .getLogger(KruskalGUI.class.getName())
        .log(java.util.logging.Level.SEVERE, null, ex);
    }
    //</editor-fold>
    //</editor-fold>

    /* Create and display the form */
    java.awt.EventQueue.invokeLater(
      new Runnable() {
        public void run() {
          new KruskalGUI().setVisible(true);
        }
      }
    );
  }

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JMenuItem aboutJMenuItem;
  private javax.swing.JPanel controlJPanel;
  private javax.swing.JMenuItem detailsJMenuItem;
  private javax.swing.JLabel fileJLabel;
  private javax.swing.JMenu fileJMenu;
  private javax.swing.JPopupMenu.Separator fileJSeparator;
  private javax.swing.JComboBox<String> filesJComboBox;
  private javax.swing.JButton goJButton;
  private javax.swing.JMenu helpMenu;
  private javax.swing.JMenu moreJMenu;
  private javax.swing.JMenuItem pathJMenuItem;
  private javax.swing.JMenuBar personJMenuBar;
  private javax.swing.JMenuItem printMenuItem;
  private javax.swing.JButton quitJButton;
  private javax.swing.JMenuItem quitJMenuItem;
  private javax.swing.JTextArea resultsJTextArea;
  private javax.swing.JScrollPane resultsScrollPane;
  private javax.swing.JMenuItem showPictureOfGraphsJMenuItem;
  private javax.swing.JLabel titleJLabel;
  // End of variables declaration//GEN-END:variables
}
